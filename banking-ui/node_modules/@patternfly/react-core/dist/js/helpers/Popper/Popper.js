"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const ReactDOM = tslib_1.__importStar(require("react-dom"));
const FindRefWrapper_1 = require("./FindRefWrapper");
const react_popper_1 = require("react-popper");
exports.Popper = ({ trigger, popper, popperMatchesTriggerWidth = true, direction = 'down', position = 'left', appendTo = () => document.body, zIndex = 9999, isVisible = true }) => {
    const [triggerElement, setTriggerElement] = React.useState(null);
    const [popperElement, setPopperElement] = React.useState(null);
    const [ready, setReady] = React.useState(false);
    React.useEffect(() => setReady(true));
    const getPlacement = () => `${direction === 'up' ? 'top' : 'bottom'}-${position === 'right' ? 'end' : 'start'}`;
    const sameWidthMod = React.useMemo(() => ({
        name: 'sameWidth',
        enabled: popperMatchesTriggerWidth,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: ({ state }) => {
            state.styles.popper.width = `${state.rects.reference.width}px`;
        },
        effect: ({ state }) => () => {
            state.elements.popper.style.width = `${state.elements.reference.offsetWidth}px`;
        }
    }), [popperMatchesTriggerWidth]);
    const { styles: popperStyles, attributes } = react_popper_1.usePopper(triggerElement, popperElement, {
        placement: getPlacement(),
        modifiers: [
            {
                name: 'offset',
                options: {
                    offset: [0, 0] // offset: [0, 15] for tooltips and popovers
                }
            },
            {
                name: 'preventOverflow',
                enabled: false
            },
            {
                name: 'hide',
                enabled: false
            },
            {
                name: 'flip',
                enabled: false
            },
            sameWidthMod
        ]
    });
    const menuWithPopper = React.cloneElement(popper, Object.assign({ style: Object.assign(Object.assign(Object.assign({}, ((popper.props && popper.props.style) || {})), popperStyles.popper), { zIndex }) }, attributes.popper));
    const getTarget = () => {
        if (typeof appendTo === 'function') {
            return appendTo();
        }
        return appendTo;
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(FindRefWrapper_1.FindRefWrapper, { onFoundRef: (foundRef) => setTriggerElement(foundRef) }, trigger),
        ready &&
            isVisible &&
            ReactDOM.createPortal(React.createElement(FindRefWrapper_1.FindRefWrapper, { onFoundRef: (foundRef) => setPopperElement(foundRef) }, menuWithPopper), getTarget())));
};
exports.Popper.displayName = 'Popper';
//# sourceMappingURL=Popper.js.map